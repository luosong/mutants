webpackJsonp([2],{3:function(n,e,s){n.exports=s(2)(155)},182:function(n,e,s){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var a=s(1),c=t(a),r=s(3),l=t(r),i=s(541),o=t(i),d=function(){return c["default"].createElement("div",null,c["default"].createElement(l["default"],{text:o["default"]}))};e["default"]=d},541:function(n,e){n.exports="# 开发项目结构介绍\n\n如果你还没有创建自己的应用项目，那么你可以前往[开始使用](./docs.html#/quickstart) 生成项目。但若你通过chanjet-gzq-h5项目生成工具，已经创建了。请继续往下看：\n\n### 项目整体介绍\n\n项目中的目录结构，如下：\n\n``` javascript\n\n    ├── internals\n    │    ├── scripts\n    |        |—— build-lib.js\n    |        |—— server.js\n    │    ├── webpack\n    |        |—— dll.config.js\n    |        |—— webpack-dev-server.config.js\n    |        |—— webpack-prd.config.js\n    ├── src\n    │    ├── components\n    │    ├── theme\n    │    ├── www\n    |        |—— cordova\n    |        |—— css\n    |        |—— images\n    |        |—— index.html\n    |        |—— libs\n    │    ├── app.js\n    │    ├── app-routes.js\n    ├── package.json\n    ├── README.md\n    ├── .babelrc\n```\n\n\n\n我们从按照文件夹的顺序，从上到下依次来介绍，，每个文件所起到的作用：\n\n* internals  主要有项目打包，编译，静态文件服务器等\n  * scripts  有两个文件：build-lib.js用于本地开发阶段，执行抽取出来公共依赖module；server.js用于本地验证生产包阶段，\b可启动一个放置生产包的静态文件服务器。\n  * webpack 有三个文件：dll.config.js 将常用的基础模块抽取成单独的文件，不再打包到各个文件中，执行后，在根目录会生成一个mainfest.json文件，里面定义了被抽取出来的文件的别名；webpack-dev-server.config.js用于本地开发时；webpack-prd.config.js用不build生产包。\n* src 主要是与项目业务，界面显示相关的代码\n  * components 页面，组件等可放在这个文件夹中。\n  * theme 主题(如果您没有主题颜色，可忽略)，里面可定义组件，页面的主题颜色。\n  * www 静态输出文件，在启动本地开发阶段的webpack server时，www是服务的根目录。其中index.html是访问项目的入口文件。**在工作圈中远程调试时，IOS访问index.html，Android访问index_android.html **\n  * app.js 应用的入口JS文件。\n  * app-routes.js 应用路由配置文件。\n* package.json 中含各种所需模块以及项目的配置信息（名称、版本、许可证等）meta 信息。\n* .babelrc   Babel编译时，使用的工具和模块都需要在.babelrc中定义。\n\n了解了整个项目文件结构后，可以开始您的应用开发之旅了。\n\n"}});