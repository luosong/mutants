webpackJsonp([38],{3:function(n,e,t){n.exports=t(2)(155)},156:function(n,e){n.exports="# 本地开发模式的调试功能\n\n\n\n## 什么是本地开发模式？\n\n　　在开发者的电脑上，启用一个本地的 web service，运行指定本地路径下某个目录下的html,加载图片脚本等资源，运行应用。所有的html,js,css,image等资源都在开发者本地，唯独数据不在本地，是通过访问服务器的接口获取的。\n\n　　那么问题来了，html在本地域下，数据是请求服务器接口获取的，然而这两部分不在同一个域下，那必然要进行跨域访问，本地域如何跨域访问互联网上的服务器？以往我们只能打开浏览器跨域设置，取消掉跨域的限制，这样我们能实现跨域的问题，这在我们的PC电脑上是能够解决的，但是应用如果运行在移动设备的浏览器里时，怎么办？\n\n\n## PC上使用 chanjet-dev-proxy 来解决跨域访问。\n\n`chanjet-dev-proxy` 是一个 npm modules,其作用是建立本地代理，应用中通过一个服务器接口时，首先会转换成一个本地路径的访问，服务器接口地址会作为参数传递到 `chanjet-dev-proxy` 上，然后 `chanjet-dev-proxy` 会访问服务器接口获得数据，然后作为本地路径访问的返回数据，返回给应用。通过这种方式，我们解决了跨域的问题。\n  \n-  ### 如何安装 chanjet-dev-proxy?  \n\n　　在node环境下对 chanjet-dev-proxy 全局安装，运行如下命令行（ps:根据当前用户权限，确实是否需要使用 sudo 命令执行）：\n``` bash\ncnpm install -g chanjet-dev-proxy\n```\n\n\n- 如何运行 chanjet-dev-proxy?\n\n　　在node环境下，运行如下命令行（ps:根据当前用户权限，确实是否需要使用 sudo 命令执行）：\n```bash\nchanjet-dev-proxy\n``` \n　　运行正常会有如下显示，chanjet-dev-proxy会启动一个 web service,占用3001端口：\n```bash\nRuning CORS Anywhere on 0.0.0.0:3001 \n```\n\n## 在移动设备上怎么调试\n\n　　PC本地开发完成后，我们要放到移动设备上进行验证，我们可以通过网络访问PC本地的应用进行调试。\n　　比如电脑IP是 192.168.1.100，应用的本地访问地址为：http://localhost:8080/index.html， 我们先启动移动设备上的浏览器，然后在地址栏输入 http://192.168.1.100:8080/index.html，这样浏览器就可以运行应用了。\n  \n  \n  "},157:function(n,e){n.exports="# Web应用在移动设备上调试的烦恼\n\n我们的应用开始已经有一阵了，我们写了一堆的代码，我们通过浏览器Run起来了，嗯，看起来效果不错，整个应用已经准备就绪，我们要把项目放到手机里运行，程序猿们满怀憧憬地把应用打好包放到移动设备环境中，OK，见证奇迹的时刻到来了，…… …… 纳尼，为什么一片空白，什么都没有？发生了什么情况，为什么没有任何界面，问题出在那里，哪个部分报错了？天哪，我应该怎么调试？移动设备上无法看到控制台，看不到出错信息，无法设置断点跟踪代码的执行等，怎么办？\n\n是不是已经开始抓狂了？下面介绍如何在移动设备上进行调试。\n  \n首先来了解我们的运行环境，目前我们的移动设备主流的系统为 IOS 和 Android，显然在两个不同的系统下，调试的操作和过程也是不同的，但有两点是共同：\n\n- 需要使用数据线将移动设备和电脑连接到一起\n- 需要在电脑上打开相应的浏览器进行调试\n  - IOS 的调试需要使用 Safari\n  - Android 的调试需要使用 Chromea\n\n　　做好这两个步骤之后，我们来开始调试程序，首先是比较容易的Android:\n  \n## Android调试：\n\n\n- ### step1: 打开Android设备的开发者调试模式  \n\n  只有打开 Android 设备的开发者调试功能才能进行调试，通用的步骤如下：\n  1. 进入设备设置界面\n  2. 进入开发人员选项\n  3. 找到USB调试选项，打开选项\n\n\n- ### step2: 使用数据线连接Android设备和电脑\n\n  1. 使用数据线连接设备和电脑\n  2. 连接完毕后，设备上会显示一个提示框，需要获得连接调试授权，这个时候确定就好了\n\n- ### step3: 在电脑上打开Chrome，进入监视模式  \n\n  1. 打开chrome，在地址栏输入 `chrome://inspect`\n  2. chrome中会显示检查到的当前连接设备名称，如果当前有应用打开一个页面，设备名称下方就会显示这些应用列表以及该应用访问的网页地址，每个地址下面还有4个链接，分别是：`inspect`，`focus tab`，`reload`，`close`\n\n\n- ### step4: 从Chrome打开Android设备上访问的页面的调试窗口进行调试\n\n  1. 从上一步的列表项中选择你要调试的页面，点击该页面连接下的`inspect`，打开监视窗口进入调试\n  2. 监视窗口分为左右两部分，左边有地址栏和页面显示，右边就是调试开发工具栏，就跟在电脑调试页面一样了，可以查看控制台日志，打断点等。   \n  ps: 这里需要注意的是：打开监视窗口会首先访问google的一些资源，然后才会显示调试窗口，如果访问google失败，就会显示白屏，什么都没有，所以请使用代理或者别的方式让访问google通过。\n  \n  \n \n## IOS 调试：\n\n\n- #### step1:\n- #### step2:\n\n\n"},357:function(n,e,t){"use strict";function o(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var d=t(1),r=o(d),a=t(3),c=o(a),s=t(157),l=o(s),p=t(156),i=o(p),u={root:{padding:"20px 40px"}},h=function(){return r["default"].createElement("div",{style:u.root},r["default"].createElement(c["default"],{text:l["default"]}),r["default"].createElement("div",null,r["default"].createElement(c["default"],{text:i["default"]})))};e["default"]=h}});