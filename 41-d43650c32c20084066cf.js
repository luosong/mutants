webpackJsonp([41],{3:function(e,n,t){e.exports=t(2)(155)},382:function(e,n,t){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function s(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),u=t(1),i=r(u),l=t(15),f=(r(l),t(3)),p=r(f),b=t(559),d=r(b),v=function(e){function n(){return a(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return s(n,e),c(n,[{key:"render",value:function(){return i["default"].createElement("div",null,i["default"].createElement(p["default"],{text:d["default"]}))}}]),n}(i["default"].Component);n["default"]=v},559:function(e,n){e.exports="# Restore 模式\n\n<span class=\"alertText\">* 这是一个特殊的模式, 仅在工作圈应用中有效。</span>\n\n由于 Android 系统在调用手机 native 插件能力时(如调用摄像头拍照)有可能将工作圈应用杀掉，这样会造成当前应用的状态全部丢失，再次进来时不得不从应用初始状态开始。为了解决这个问题，在调用插件能力时，预先通过 saveInstanceState 生命周期方法来收集当前页面的状态数据，然后再调起插件，以便当工作圈被杀掉重启后用来对 H5 应用状态恢复，尽可能的回到调用插件时的状态。\n\n当然并不是所有页面都需要使用这种方式，毕竟为此需要写额外的代码处理页面的 restore 生命周期。因为本身页面使用的参数也会在应用重启时恢复到页面，对于不存在于页面参数中，只是用户临时行为的状态需要保留时进行处理。建议做新增、编辑的操作的页面使用，以保留用户输入的表单内容。\n\n<br/>\n### Restore 模式的相关生命周期\n\n- page.saveInstanceState\n- page.restoreInstanceState\n\n<br/>\n### Restore 模式的过程\n\n- 首先应用在调用插件时，会先触发 NavigationController 对所有页面状态的保存请求。\n- NavigationController 收到消息后，会调用每一个页面的 saveInstanceState 方法，该方法返回所在页需要保留的数据。\n- NavigationController 收集到整个应用需要保留的数据后临时保存起来。\n- 工作圈应用被杀掉重新启动后，会根据记录按照之前的页面栈恢复到当前页面栈，页面在初始化的时候会获得页面的参数和页面的状态数据。\n- 页面初始化进行 constructor 构造函数调用时会调用 restoreInstanceState 方法，将之前 saveInstanceState 的数据拿到，然后设置页面的状态，最终页面启动后恢复到调用插件时的状态。\n\n<span class=\"careText\">* 注意：获取插件的返回结果需要到 mutants 下获取，不在 restoreInstanceState 方法的参数中。</span>\n\n<br/>\n### 页面示例\n\n```javascript\nimport {Page} from 'chanjet-navigator';\n\nexport default class AppPage extends Page{\n\n    renderContent(){\n        ...  \n    }\n        \n\t//保存数据\n    saveInstanceState(){\n      return {\n        state: 'test'\n      }\n    }\n      \n    //恢复数据\n    restoreInstanceState(savedState){\n    \tconst {state} = savedState;\n      \t//开始重置数据，初始化页面启动状态\n      \t...\n    }\n\n}\n```\n\n<br/><br/>"}});