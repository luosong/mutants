webpackJsonp([52],{3:function(n,e,t){n.exports=t(2)(155)},353:function(n,e,t){"use strict";function r(n){return n&&n.__esModule?n:{"default":n}}function o(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function a(n,e){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?n:e}function c(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var u=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),i=t(1),f=r(i),l=t(15),s=(r(l),t(3)),p=r(s),h=t(535),b=r(h),d=function(n){function e(){return o(this,e),a(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return c(e,n),u(e,[{key:"render",value:function(){return f["default"].createElement("div",null,f["default"].createElement(p["default"],{text:b["default"]}))}}]),e}(f["default"].Component);e["default"]=d},535:function(n,e){n.exports='# 应用开发\n\n工作圈应用开发首先是基于工作圈的应用环境来进行开发，工作圈来调度应用的启动、关闭和切换，提供用户鉴权、插件等能力，所以整个应用的开发相比传统web应用开发多了一些环节，通过对应用的开发过程梳理，我们整理了一套应用开发的步骤流程，我们建议按这个步骤来开发：\n\n- 建立项目\n- 应用功能开发\n- 浏览器开发调试\n- 设备与浏览器联调\n- 打包上传\n- 设备加载应用包调试\n- 应用测试\n- 正式发布\n\n下面是对每个步骤详细说明。\n\n### # 建立项目\n\n首先我们要建立一个可以运行的项目框架，然后在这个框架上开展应用业务的开发。我们提供了一个运行在 `node` 环境的项目生成器 `chanjet-gzq-h5`，通过这个项目生成器开发者可以马上生成一个应用的基础框架，这个框架包含一个DEMO应用的代码、ES6的编译、代码的压缩整合、热更新、WebService的配置等，这些文件结构和代码能够通过 `npm start` 立即运行起来，一个DEMO应用就成功的构建好了。\n\n具体使用过程请参看：<a href="docs.html#/quickstart">开始使用</a>\n\n### # 应用功能开发\n\n应用功能的开发就比较简单了，开发者只需要专注应用功能的实现，这里我们提供了各种功能模块，便于开发者能够较快速的完成开发。\n\n目前我们提供以下模块\n\n- #### chanjet-mutants\n\n  这是一个基础模块，用于环境判断。\n\n\n- #### chanjet-plugins \n\n  native 能力插件集合，这里包含拍照、选图、位置、上传等各种插件。\n\n- #### chanjet-navigator\n\n  一套应用页面流转的导航机制，用于应用页面跳转、切换、导航栏的控制等。\n\n- #### chanjet-sdk\n\n  这个模块仅适用虚拟机应用，提供了一套鉴权、数据请求的方案。\n\n- #### chanjet-ui\n\n  提供一套丰富的、可配置主题的UI组件库。\n\n- #### chanjet-scroller\n\n  一个滚动容器组件，模拟还原原生应用的弹性滚动处理。\n\n- #### chanjet-virtual-list\n\n  虚拟列表组件，提供高效的列表显示，适用于大量数据的列表渲染和交互处理。\n\n相关模块的具体使用，请参看 <a href="docs.html#/docs">文档</a> 部分。\n\n### # 浏览器开发调试\n\n有了可以运行的DEMO应用，我们就可以边开发边调试了，我们建议使用chrome浏览器来进行开发调试，因为chrome提供了很好的开发调试工具，而且可以安装React的调试插件。\n\n我们同时在DEMO运行环境上配置了ES6代码编译、代码压缩和Sources Code、热更新等，使得我们的调试更加方便，开发者只要完成保存代码的动作，webpack就会马上自动编译处理，浏览器会立即呈现修改之后的应用。\n\n### # 设备与浏览器联调\n\n在完成应用主体的开发或者需要调试插件功能时，我们就可以开启设备与浏览器的连接调试了。\n\n### 打包上传\n\n### 设备加载应用包调试\n\n### 应用测试\n\n### 正式发布\n\n\n\n'}});